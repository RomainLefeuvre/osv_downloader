from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define, field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.osv_vulnerability import OsvVulnerability


T = TypeVar("T", bound="V1VulnerabilityList")


@define
class V1VulnerabilityList:
    """A list of Vulnerability entries.

    Attributes:
        vulns (Union[Unset, List['OsvVulnerability']]):
        next_page_token (Union[Unset, str]):
    """

    vulns: Union[Unset, List["OsvVulnerability"]] = UNSET
    next_page_token: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        vulns: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.vulns, Unset):
            vulns = []
            for vulns_item_data in self.vulns:
                vulns_item = vulns_item_data.to_dict()

                vulns.append(vulns_item)

        next_page_token = self.next_page_token

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if vulns is not UNSET:
            field_dict["vulns"] = vulns
        if next_page_token is not UNSET:
            field_dict["nextPageToken"] = next_page_token

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.osv_vulnerability import OsvVulnerability

        d = src_dict.copy()
        vulns = []
        _vulns = d.pop("vulns", UNSET)
        for vulns_item_data in _vulns or []:
            vulns_item = OsvVulnerability.from_dict(vulns_item_data)

            vulns.append(vulns_item)

        next_page_token = d.pop("nextPageToken", UNSET)

        v1_vulnerability_list = cls(
            vulns=vulns,
            next_page_token=next_page_token,
        )

        v1_vulnerability_list.additional_properties = d
        return v1_vulnerability_list

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
