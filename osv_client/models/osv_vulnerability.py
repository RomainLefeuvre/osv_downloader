import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define, field
from dateutil.parser import isoparse

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.osv_affected import OsvAffected
    from ..models.osv_credit import OsvCredit
    from ..models.osv_reference import OsvReference
    from ..models.osv_severity import OsvSeverity
    from ..models.osv_vulnerability_database_specific import OsvVulnerabilityDatabaseSpecific


T = TypeVar("T", bound="OsvVulnerability")


@define
class OsvVulnerability:
    """A vulnerability entry.
    The protobuf representation is *NOT* stable and only used for implementing
    the JSON based API.

        Attributes:
            schema_version (Union[Unset, str]): The OSV schema version.
            id (Union[Unset, str]): The `id` field is a unique identifier for the vulnerability entry. It is a
                string of the format `<DB>-<ENTRYID>`, where `DB` names the database and
                `ENTRYID` is in the format used by the database. For example:
                “OSV-2020-111”, “CVE-2021-3114”, or “GHSA-vp9c-fpxx-744v”.
            published (Union[Unset, datetime.datetime]): The RFC3339 timestamp indicating when this entry was published.
            modified (Union[Unset, datetime.datetime]): The RFC3339 timestamp indicating when this entry was last modified.
            withdrawn (Union[Unset, datetime.datetime]): Optional. The RFC3339 timestamp indicating when this entry is
                considered to
                be withdrawn.
            aliases (Union[Unset, List[str]]): Optional. IDs for the same vulnerability in other databases.
            related (Union[Unset, List[str]]): Optional. List of IDs of closely related vulnerabilities, such as the same
                problem in alternate ecosystems.
            summary (Union[Unset, str]): Required. One line human readable summary for the vulnerability. It is
                recommended to keep this under 120 characters.
            details (Union[Unset, str]): Required. Any additional human readable details for the vulnerability.
            affected (Union[Unset, List['OsvAffected']]): Required. Affected commit ranges and versions.
            references (Union[Unset, List['OsvReference']]): Optional. URLs to more information/advisories (including the
                scheme e.g "https://").
            database_specific (Union[Unset, OsvVulnerabilityDatabaseSpecific]): Optional. JSON object holding additional
                information about the
                vulnerability as defined by the database for which the record applies.
            severity (Union[Unset, List['OsvSeverity']]): Optional. Severity of the vulnerability.
            credits_ (Union[Unset, List['OsvCredit']]): Optional. Credits for the vulnerability.
    """

    schema_version: Union[Unset, str] = UNSET
    id: Union[Unset, str] = UNSET
    published: Union[Unset, datetime.datetime] = UNSET
    modified: Union[Unset, datetime.datetime] = UNSET
    withdrawn: Union[Unset, datetime.datetime] = UNSET
    aliases: Union[Unset, List[str]] = UNSET
    related: Union[Unset, List[str]] = UNSET
    summary: Union[Unset, str] = UNSET
    details: Union[Unset, str] = UNSET
    affected: Union[Unset, List["OsvAffected"]] = UNSET
    references: Union[Unset, List["OsvReference"]] = UNSET
    database_specific: Union[Unset, "OsvVulnerabilityDatabaseSpecific"] = UNSET
    severity: Union[Unset, List["OsvSeverity"]] = UNSET
    credits_: Union[Unset, List["OsvCredit"]] = UNSET
    additional_properties: Dict[str, Any] = field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        schema_version = self.schema_version
        id = self.id
        published: Union[Unset, str] = UNSET
        if not isinstance(self.published, Unset):
            published = self.published.isoformat()

        modified: Union[Unset, str] = UNSET
        if not isinstance(self.modified, Unset):
            modified = self.modified.isoformat()

        withdrawn: Union[Unset, str] = UNSET
        if not isinstance(self.withdrawn, Unset):
            withdrawn = self.withdrawn.isoformat()

        aliases: Union[Unset, List[str]] = UNSET
        if not isinstance(self.aliases, Unset):
            aliases = self.aliases

        related: Union[Unset, List[str]] = UNSET
        if not isinstance(self.related, Unset):
            related = self.related

        summary = self.summary
        details = self.details
        affected: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.affected, Unset):
            affected = []
            for affected_item_data in self.affected:
                affected_item = affected_item_data.to_dict()

                affected.append(affected_item)

        references: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.references, Unset):
            references = []
            for references_item_data in self.references:
                references_item = references_item_data.to_dict()

                references.append(references_item)

        database_specific: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.database_specific, Unset):
            database_specific = self.database_specific.to_dict()

        severity: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.severity, Unset):
            severity = []
            for severity_item_data in self.severity:
                severity_item = severity_item_data.to_dict()

                severity.append(severity_item)

        credits_: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.credits_, Unset):
            credits_ = []
            for credits_item_data in self.credits_:
                credits_item = credits_item_data.to_dict()

                credits_.append(credits_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if schema_version is not UNSET:
            field_dict["schemaVersion"] = schema_version
        if id is not UNSET:
            field_dict["id"] = id
        if published is not UNSET:
            field_dict["published"] = published
        if modified is not UNSET:
            field_dict["modified"] = modified
        if withdrawn is not UNSET:
            field_dict["withdrawn"] = withdrawn
        if aliases is not UNSET:
            field_dict["aliases"] = aliases
        if related is not UNSET:
            field_dict["related"] = related
        if summary is not UNSET:
            field_dict["summary"] = summary
        if details is not UNSET:
            field_dict["details"] = details
        if affected is not UNSET:
            field_dict["affected"] = affected
        if references is not UNSET:
            field_dict["references"] = references
        if database_specific is not UNSET:
            field_dict["databaseSpecific"] = database_specific
        if severity is not UNSET:
            field_dict["severity"] = severity
        if credits_ is not UNSET:
            field_dict["credits"] = credits_

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.osv_affected import OsvAffected
        from ..models.osv_credit import OsvCredit
        from ..models.osv_reference import OsvReference
        from ..models.osv_severity import OsvSeverity
        from ..models.osv_vulnerability_database_specific import OsvVulnerabilityDatabaseSpecific

        d = src_dict.copy()
        schema_version = d.pop("schemaVersion", UNSET)

        id = d.pop("id", UNSET)

        _published = d.pop("published", UNSET)
        published: Union[Unset, datetime.datetime]
        if isinstance(_published, Unset):
            published = UNSET
        else:
            published = isoparse(_published)

        _modified = d.pop("modified", UNSET)
        modified: Union[Unset, datetime.datetime]
        if isinstance(_modified, Unset):
            modified = UNSET
        else:
            modified = isoparse(_modified)

        _withdrawn = d.pop("withdrawn", UNSET)
        withdrawn: Union[Unset, datetime.datetime]
        if isinstance(_withdrawn, Unset):
            withdrawn = UNSET
        else:
            withdrawn = isoparse(_withdrawn)

        aliases = cast(List[str], d.pop("aliases", UNSET))

        related = cast(List[str], d.pop("related", UNSET))

        summary = d.pop("summary", UNSET)

        details = d.pop("details", UNSET)

        affected = []
        _affected = d.pop("affected", UNSET)
        for affected_item_data in _affected or []:
            affected_item = OsvAffected.from_dict(affected_item_data)

            affected.append(affected_item)

        references = []
        _references = d.pop("references", UNSET)
        for references_item_data in _references or []:
            references_item = OsvReference.from_dict(references_item_data)

            references.append(references_item)

        _database_specific = d.pop("databaseSpecific", UNSET)
        database_specific: Union[Unset, OsvVulnerabilityDatabaseSpecific]
        if isinstance(_database_specific, Unset):
            database_specific = UNSET
        else:
            database_specific = OsvVulnerabilityDatabaseSpecific.from_dict(_database_specific)

        severity = []
        _severity = d.pop("severity", UNSET)
        for severity_item_data in _severity or []:
            severity_item = OsvSeverity.from_dict(severity_item_data)

            severity.append(severity_item)

        credits_ = []
        _credits_ = d.pop("credits", UNSET)
        for credits_item_data in _credits_ or []:
            credits_item = OsvCredit.from_dict(credits_item_data)

            credits_.append(credits_item)

        osv_vulnerability = cls(
            schema_version=schema_version,
            id=id,
            published=published,
            modified=modified,
            withdrawn=withdrawn,
            aliases=aliases,
            related=related,
            summary=summary,
            details=details,
            affected=affected,
            references=references,
            database_specific=database_specific,
            severity=severity,
            credits_=credits_,
        )

        osv_vulnerability.additional_properties = d
        return osv_vulnerability

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
